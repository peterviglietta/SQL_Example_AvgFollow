

-- Below is the CTE that gets ALL the visits both new and follow up, that the main query uses (the main query goes on to split them out into NewCharges and Follow ups.
		-- CTE was not necessary, just makes main query more readable. All the main logic of the measurement is in the main query, the CTE just gets the charges.

with CTE_AllCharges AS (

SELECT
	btf.BillingTransactionKey, patd.PrimaryMrn,  patd.Name as Patient,  DOS.DateValue,  svcprov.name as ServiceProvider, 
		CASE
	when svcprov.PrimarySpecialty = 'Pediatric, General' then 'Pediatrics'
	when svcprov.PrimarySpecialty = 'Cardiovascular Disease' then 'Cardiology'
	when svcprov.PrimarySpecialty = 'Surgery, Orthopedic' then 'Orthopedics'
	when svcprov.PrimarySpecialty = 'Sports Medicine' then 'Orthopedics'
	when svcprov.PrimarySpecialty = 'Surgery, Hand' then 'Orthopedics'
	when svcprov.PrimarySpecialty = 'Surgery, Transplant' then 'Nephrology'
	when svcprov.PrimarySpecialty = 'Interventional Cardiology' then 'Cardiology'
				else svcprov.PrimarySpecialty  end  as  ProviderSpecialty,
	
	dep.Name as Department, bproc.Code, bproc.Name as BillingProcedure

FROM BillingTransactionFact btf
	
	LEFT OUTER JOIN ProviderDim svcprov
		on btf.ServiceProviderDurableKey = svcprov.DurableKey
		and svcprov.IsCurrent = 1

	LEFT OUTER JOIN BillingProcedureDim bproc
		on btf.BillingProcedureDurableKey = bproc.DurableKey
		and bproc.IsCurrent = 1
	
	LEFT OUTER JOIN PatientDim patd
		on btf.PatientDurableKey = patd.DurableKey
		and patd.IsCurrent = 1
	
	LEFT OUTER JOIN DateDim DOS
		on btf.ServiceDateKey = DOS.DateKey

	LEFT OUTER JOIN DepartmentDim Dep
	on btf.DepartmentKey = Dep.DepartmentKey
														

WHERE btf.IsInactive = 0
	and DOS.DateValue >= '2023-03-01' -- Date Range: Jan 1 2024 through the last day of last month.
	--and btf.ServiceProviderDurableKey IN ('3488', '1062511', '1062483', '1063079', '1061874', '1062967')
	and btf.TransactionType = 'charge'
	and bproc.code IN ( --================ ALL VISIT CODES, New and Follow up
					   '99241', '99242', '99243', '99244', '99245', -- Consult codes
					   '99201', '99202', '99203', '99204', '99205', -- New OVs
					   '99211', '99212', '99213', '99214', '99215' -- Follow ups
					   )
			)





--=====================================================================================================================================================================
--MAIN QUERY below that uses CTE from above. Make note of the FROM clause, selecting from CTE_AllCharges and aliasing it as NewCharges, and then joining it to itself. Then the rest will make sense.




SELECT 	NPVCharges.*, 
		COUNT(FollowUpCharges.BillingTransactionKey) as FollowUps, 
		CAST(AVG(CAST(COUNT(FollowUpCharges.BillingTransactionKey) as decimal (10, 1))) over(partition by NPVCharges.ServiceProvider) as decimal(10, 3)) AS ProviderAverageFollowUps   -- all the follow ups generated by that NPV, then an average per provider

FROM CTE_AllCharges NPVCharges
	LEFT OUTER JOIN CTE_AllCharges FollowUpCharges
		on FollowUpCharges.PrimaryMRN = NPVCharges.PrimaryMRN
		and FollowUpCharges.ServiceProvider = NPVCharges.ServiceProvider
		and FollowUpCharges.code IN ('99211', '99212', '99213', '99214', '99215') -- Follow Up Visits
		and FollowUpCharges.DateValue between NPVCharges.DateValue and DATEADD(year, 1, NPVCharges.DateValue)--- You're counting the values in this joined table. Nulls will count for zero. 
																												-- It's the count, for a given NPV visit, of the Follow Up Visit codes, for that
																												-- patient, for that ServiceProvider, that happened within a year after the DOS of
																												-- the NPV visit. And remember our main CTE is getting all charges all the way up to 
																												-- today, which it needs to because even though the NPV query only looking for visits
																												-- that happened one year ago or more, the follow up could have happened within that year.

WHERE NPVCharges.Code IN ( --================ New Patient Visits
					   '99241', '99242', '99243', '99244', '99245', -- Consult codes
					   '99201', '99202', '99203', '99204', '99205' -- New OVs
					   )
	  and NPVCharges.DateValue between '03-01-2023' and DATEADD(year, -1, GETDATE())---- Start by getting every NPV charge code for any patient since we went live on Epic, but don't include
																					  -- any NPV Charge that happened less than a year ago. Because remember we are measuring how many subsequent 
																					  -- followUps happened in the year after a given NPV Charge.

	  and NPVCharges.ProviderSpecialty NOT IN ('Internal Medicine', 'Family Medicine', 'Pediatrics')

GROUP BY NPVCharges.BillingTransactionKey, NPVCharges.PrimaryMrn,  NPVCharges.Patient,  NPVCharges.DateValue,  NPVCharges.ServiceProvider, NPVCharges.ProviderSpecialty,
		NPVCharges.Department, NPVCharges.Code, NPVCharges.BillingProcedure

ORDER BY NPVCharges.PrimaryMrn, NPVCharges.DateValue













































